#
# .zshrc is sourced in interactive shells.
# It should contain commands to set up aliases,
# functions, options, key bindings, etc.
#

autoload -U compinit
compinit

autoload -U promptinit
promptinit



#prompt elite2

#allow tab completion in the middle of a word
setopt COMPLETE_IN_WORD

if [ -d /wayfair/pkg/python2.7 ]; then
  export PATH=/wayfair/pkg/python2.7/latest/bin:$PATH
fi

export PATH=/usr/local/heroku/bin:$PATH

export JAVA_HOME=/usr/java/jdk1.6.0_31
export PATH=$JAVA_HOME/bin:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/
export M2_HOME=/usr/lib64/maven/apache-maven-3.2.1
export M2=$M2_HOME/bin
export PATH=$M2:$PATH

## keep background processes at full speed
#setopt NOBGNICE
## restart running processes on exit
#setopt HUP

## history
#setopt APPEND_HISTORY
## for sharing history between zsh processes
#setopt INC_APPEND_HISTORY
#setopt SHARE_HISTORY

## never ever beep ever
#setopt NO_BEEP

## automatically decide when to page a list of completions
#LISTMAX=0

## disable mail checking
#MAILCHECK=0

autoload -U colors && colors

##PROMPT="%m: %~ "
PROMPT="@%{$fg[blue]%}%m %{$fg_no_bold[yellow]%}%2~%{$reset_color%}:"
RPROMPT="[%{$fg_no_bold[yellow]%}%?%{$reset_color%}]"

#History search
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"    history-beginning-search-backward
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}"  history-beginning-search-forward

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}

key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

U_DRIVE_SMB_SHARE="//bonas1a.csnzoo.com/u_drive/${USER}"
U_DRIVE_MOUNT_DIR="${HOME}/u_drive"

mount_u_drive() {
  local NON_INTERACTIVE_MODE
  if [[ -n "${1-}" ]]; then
    NON_INTERACTIVE_MODE=1
  fi

  if ! grep --quiet --no-messages "${U_DRIVE_MOUNT_DIR}" '/proc/mounts'; then
    mkdir -p "${U_DRIVE_MOUNT_DIR}"
    echo "Mounting ${U_DRIVE_SMB_SHARE} on ${U_DRIVE_MOUNT_DIR}"
    sudo mount.cifs "${U_DRIVE_SMB_SHARE}" "${U_DRIVE_MOUNT_DIR}" \
      -o "user=${USER},uid=$(id -u "${USER}"),gid=$(id -g "${USER}"),file_mode=0644,dir_mode=0755"
  elif [[ "${NON_INTERACTIVE_MODE}" -ne 1 ]]; then
    echo "${U_DRIVE_MOUNT_DIR} is already an active mount point"
  fi
}

umount_u_drive() {
  if grep --quiet --no-messages "${U_DRIVE_MOUNT_DIR}" '/proc/mounts'; then
    echo "Unmounting ${U_DRIVE_SMB_SHARE} from ${U_DRIVE_MOUNT_DIR}"
    sudo umount "${U_DRIVE_MOUNT_DIR}"
  else
    echo "${U_DRIVE_MOUNT_DIR} is not an active mount point"
  fi
}

mount_u_drive 'NON_INTERACTIVE_MODE'

# Note: ~/.ssh/environment should not be used, as it
#       already has a different purpose in SSH.

env=~/.ssh/agent.env

# Note: Don't bother checking SSH_AGENT_PID. It's not used
#       by SSH itself, and it might even be incorrect
#       (for example, when using agent-forwarding over SSH).

agent_is_running() {
    if [ "$SSH_AUTH_SOCK" ]; then
        # ssh-add returns:
        #   0 = agent running, has keys
        #   1 = agent running, no keys
        #   2 = agent not running
        ssh-add -l >/dev/null 2>&1 || [ $? -eq 1 ]
    else
        false
    fi
}

agent_has_keys() {
    ssh-add -l >/dev/null 2>&1
}

agent_load_env() {
    . "$env" >/dev/null
}

agent_start() {
    (umask 077; ssh-agent >"$env")
    . "$env" >/dev/null
}

if ! agent_is_running; then
    agent_load_env
fi

# if your keys are not stored in ~/.ssh/id_rsa or ~/.ssh/id_dsa, you'll need
# to paste the proper path after ssh-add
if ! agent_is_running; then
    agent_start
    ssh-add
elif ! agent_has_keys; then
    ssh-add
fi

unset env

# personal aliases
#
# shell
alias l='ls -lhs'
alias wfh='cd /wayfair/home/rtorres'
alias cl='clear'
alias cll='clear ; ls -lhs'
alias clean='rm *.pyc'
alias lash='clear ; ls -lash'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# git
alias gcm='git checkout master'
alias gaa='git add --all'
alias gca='git commit -a'
